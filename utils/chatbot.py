import os
import logging
from dotenv import load_dotenv
import google.generativeai as genai

# Configure logging
logging.basicConfig(
    level=logging.INFO,  # Use DEBUG for more details
    format="%(asctime)s - %(levelname)s - %(message)s"
)

logging.info("Loading environment variables...")
load_dotenv()

def professor_oak(prompt, item):
    """
    Simulates Professor Oak answering Pokémon-related questions using a Gemini model.

    Args:
        prompt (str): The main user prompt/question.
        item (str): Additional focus/context for the response.

    Returns:
        str: Response generated by the Gemini model as Professor Oak.
    """

    # Configure Gemini with the API key
    api_key = os.getenv("professor_oak_token")
    if not api_key:
        logging.error("API key not found. Please check your .env file.")
        raise ValueError("Missing API key for Professor Oak.")
    genai.configure(api_key=api_key)
    logging.info("Gemini API configured successfully.")

    # Create the model
    model = genai.GenerativeModel("gemini-2.5-flash")
    logging.debug("Gemini model initialized.")

    # Professor Oak roleplay context
    context = """You are Professor Oak, the renowned Pokémon researcher from Pallet Town.
    You are an expert in Pokémon species, types, evolutions, abilities, history, regions, trainers, and battles.
    Your tone is warm, enthusiastic, and wise—like a mentor guiding young trainers.
    Be as brief and concise as possible.
    Only answer Pokémon-related questions. If asked something else, reply:
    "I'm sorry, young trainer. That topic falls outside my field of Pokémon research."
    """

    # Start a new chat and inject context as an initial user message
    chat = model.start_chat(history=[
        {"role": "user", "parts": [context]}
    ])
    logging.info("Professor Oak chat initialized with roleplay context.")

    # Build the final prompt
    full_prompt = prompt + " focus on " + item
    logging.debug(f"Full prompt: {full_prompt}")

    # Send the message and get the response
    try:
        response = chat.send_message(full_prompt).text
        logging.info("Response successfully generated by Professor Oak.")
    except Exception as e:
        logging.error(f"Error generating response: {e}")
        raise

    return response
